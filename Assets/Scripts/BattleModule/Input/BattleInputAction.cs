//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/BattleModule/Input/BattleInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BattleInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BattleInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BattleInputAction"",
    ""maps"": [
        {
            ""name"": ""BattleInput"",
            ""id"": ""c0a75210-6cec-47a0-911d-dc45605c3ebb"",
            ""actions"": [
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""1bf8a762-8f46-4d10-9cb7-e149d957c099"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""49e59c7d-192a-477e-8021-122082c31815"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""141e9ebd-d99b-450b-9f96-723be79225cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftMouseButton"",
                    ""type"": ""Button"",
                    ""id"": ""42116fd0-2cc5-49a9-b095-a6e070124253"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""2a54c39d-da11-4884-b83b-ea5391444db5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f43e8049-04ab-4a1f-9985-006eaef2f5ed"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8acf8c0-c8c2-4328-9c0a-32c483321655"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2489d596-b663-4397-afeb-0c1f233d3081"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""300d2e78-30e6-4440-a6ba-06df2f7be0da"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fc5c35f-b030-409a-865c-e9ebd57628be"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BattleInput
        m_BattleInput = asset.FindActionMap("BattleInput", throwIfNotFound: true);
        m_BattleInput_LeftArrow = m_BattleInput.FindAction("LeftArrow", throwIfNotFound: true);
        m_BattleInput_RightArrow = m_BattleInput.FindAction("RightArrow", throwIfNotFound: true);
        m_BattleInput_MousePosition = m_BattleInput.FindAction("MousePosition", throwIfNotFound: true);
        m_BattleInput_LeftMouseButton = m_BattleInput.FindAction("LeftMouseButton", throwIfNotFound: true);
        m_BattleInput_Cancel = m_BattleInput.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleInput
    private readonly InputActionMap m_BattleInput;
    private List<IBattleInputActions> m_BattleInputActionsCallbackInterfaces = new List<IBattleInputActions>();
    private readonly InputAction m_BattleInput_LeftArrow;
    private readonly InputAction m_BattleInput_RightArrow;
    private readonly InputAction m_BattleInput_MousePosition;
    private readonly InputAction m_BattleInput_LeftMouseButton;
    private readonly InputAction m_BattleInput_Cancel;
    public struct BattleInputActions
    {
        private @BattleInputAction m_Wrapper;
        public BattleInputActions(@BattleInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftArrow => m_Wrapper.m_BattleInput_LeftArrow;
        public InputAction @RightArrow => m_Wrapper.m_BattleInput_RightArrow;
        public InputAction @MousePosition => m_Wrapper.m_BattleInput_MousePosition;
        public InputAction @LeftMouseButton => m_Wrapper.m_BattleInput_LeftMouseButton;
        public InputAction @Cancel => m_Wrapper.m_BattleInput_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_BattleInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleInputActions set) { return set.Get(); }
        public void AddCallbacks(IBattleInputActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleInputActionsCallbackInterfaces.Add(instance);
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @LeftMouseButton.started += instance.OnLeftMouseButton;
            @LeftMouseButton.performed += instance.OnLeftMouseButton;
            @LeftMouseButton.canceled += instance.OnLeftMouseButton;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IBattleInputActions instance)
        {
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @LeftMouseButton.started -= instance.OnLeftMouseButton;
            @LeftMouseButton.performed -= instance.OnLeftMouseButton;
            @LeftMouseButton.canceled -= instance.OnLeftMouseButton;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IBattleInputActions instance)
        {
            if (m_Wrapper.m_BattleInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleInputActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleInputActions @BattleInput => new BattleInputActions(this);
    public interface IBattleInputActions
    {
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnLeftMouseButton(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
